import { App, MarkdownView, Notice, Plugin, PluginSettingTab, Setting, Modal } from "obsidian";
import fetch from "node-fetch";

interface TimewebPluginSettings {
  token: string;
  agentId: string;
}

const DEFAULT_SETTINGS: TimewebPluginSettings = {
  token: "",
  agentId: ""
};

// –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UI
class InstructionModal extends Modal {
  result: string | null = null;
  placeholder: string;

  constructor(app: App, placeholder: string) {
    super(app);
    this.placeholder = placeholder;
  }

  onOpen() {
    const { contentEl } = this;

    contentEl.createEl("h3", { text: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é" });

    const textarea = contentEl.createEl("textarea");
    textarea.style.width = "100%";
    textarea.style.height = "100px";
    textarea.style.marginBottom = "10px";
    textarea.placeholder = this.placeholder;
    textarea.focus();

    const buttonContainer = contentEl.createDiv();
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "flex-end";
    buttonContainer.style.gap = "10px";

    const cancelBtn = buttonContainer.createEl("button", { text: "–û—Ç–º–µ–Ω–∞" });
    cancelBtn.onclick = () => {
      this.result = null;
      this.close();
    };

    const sendBtn = buttonContainer.createEl("button", { text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" });
    sendBtn.onclick = () => {
      this.result = textarea.value;
      this.close();
    };

    textarea.addEventListener("keypress", (e) => {
      if (e.key === "Enter" && e.shiftKey) return; // Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
      if (e.key === "Enter") {
        this.result = textarea.value;
        this.close();
      }
    });
  }

  onClose() {
    this.contentEl.empty();
  }
}

export default class TimewebPlugin extends Plugin {
  settings: TimewebPluginSettings;

  async onload() {
    console.log("‚úÖ Timeweb AI Plugin loaded");

    await this.loadSettings();

    this.addCommand({
      id: "timeweb-transform-selection",
      name: "Timeweb: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç (–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –Ω–æ–≤—ã–π)",
      editorCallback: async () => {
        if (!this.settings.token || !this.settings.agentId) {
          new Notice("‚ö† –£–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –∏ Agent ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö");
          return;
        }

        const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);
        if (!activeView) {
          new Notice("‚ö† –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞");
          return;
        }

        const editorInstance = activeView.editor;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–ª–∏ –∫—É—Ä—Å–æ—Ä–∞
        const cursorStart = editorInstance.getCursor("from");
        const cursorEnd = editorInstance.getCursor("to");
        const selectedText = editorInstance.getSelection();

        const placeholder = selectedText
          ? "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º?"
          : "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏";

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        const modal = new InstructionModal(this.app, placeholder);
        modal.open();
        await new Promise<void>((resolve) => {
          modal.onClose = () => resolve();
        });

        const instructionOrText = modal.result;
        if (!instructionOrText) return;

        // ‚ö° –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
        editorInstance.setSelection(cursorStart, cursorEnd);

        const textToSend = selectedText ? selectedText : instructionOrText;
        const instruction = selectedText ? instructionOrText : "–û–±—Ä–∞–±–æ—Ç–∞–π —Ç–µ–∫—Å—Ç";

        const message = `–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: ${instruction}\n\n–¢–µ–∫—Å—Ç:\n${textToSend}`;

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." (–≤–∏—Å–∏—Ç, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é)
        const generationNotice = new Notice("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...", 0);

        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 30000); // 30 —Å–µ–∫—É–Ω–¥

        try {
          const response = await fetch(
            `https://api.timeweb.cloud/api/v1/cloud-ai/agents/${this.settings.agentId}/call`,
            {
              method: "POST",
              headers: {
                Authorization: `Bearer ${this.settings.token}`,
                "Content-Type": "application/json"
              },
              body: JSON.stringify({ message }),
              signal: controller.signal
            }
          );

          if (!response.ok) {
            generationNotice.hide();
            new Notice(`‚ùå –û—à–∏–±–∫–∞ API: ${response.status}`);
            return;
          }

          const data = await response.json();
          const reply = data?.message ?? "‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞";

          // –í—Å—Ç–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
          editorInstance.replaceSelection(reply);

          // –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
          generationNotice.hide();
          new Notice("‚úÖ –û—Ç–≤–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –∑–∞–º–µ—Ç–∫—É", 3000); // 3 —Å–µ–∫—É–Ω–¥—ã
        } catch (err) {
          console.error(err);
          generationNotice.hide();
          new Notice("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç (30 —Å–µ–∫—É–Ω–¥)");
        } finally {
          clearTimeout(timeout);
        }
      }
    });

    this.addSettingTab(new TimewebSettingTab(this.app, this));
  }

  onunload() {
    console.log("üõë Timeweb AI Plugin unloaded");
  }

  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }

  async saveSettings() {
    await this.saveData(this.settings);
  }
}

class TimewebSettingTab extends PluginSettingTab {
  plugin: TimewebPlugin;

  constructor(app: App, plugin: TimewebPlugin) {
    super(app, plugin);
    this.plugin = plugin;
  }

  display(): void {
    const { containerEl } = this;
    containerEl.empty();

    containerEl.createEl("h2", { text: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Timeweb AI" });

    new Setting(containerEl)
      .setName("API Token")
      .setDesc("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Timeweb")
      .addText((text) =>
        text
          .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω")
          .setValue(this.plugin.settings.token)
          .onChange(async (value) => {
            this.plugin.settings.token = value;
            await this.plugin.saveSettings();
          })
      );

    new Setting(containerEl)
      .setName("Agent ID")
      .setDesc("ID —Ç–≤–æ–µ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞")
      .addText((text) =>
        text
          .setPlaceholder("–í–≤–µ–¥–∏—Ç–µ Agent ID")
          .setValue(this.plugin.settings.agentId)
          .onChange(async (value) => {
            this.plugin.settings.agentId = value;
            await this.plugin.saveSettings();
          })
      );
  }
}
